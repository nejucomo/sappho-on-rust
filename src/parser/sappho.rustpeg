use super::super::ast::{
    Expression,
    Function,
    FuncRule,
    Identifier,
    List,
    Literal,
    Object,
    Pattern,
    Properties,
    PureLeafExpression,
    Query,
    QueryExpression
};


#[pub]
expression -> Expression
  = ple:pureleafexpression { Expression::PLE(ple) }
  / le:list_expression     { Expression::LE(le)   }

queryexpression -> QueryExpression
  = ple:pureleafexpression   { QueryExpression::PLE(ple)     }
  / lqe:list_queryexpression { QueryExpression::LE(lqe)      }
  / qa:queryapp              { QueryExpression::QueryApp(qa) }


pureleafexpression -> PureLeafExpression
  = i:identifier { PureLeafExpression::Dereference(i) }
  / l:literal    { PureLeafExpression::Literal(l)     }
  / o:object     { PureLeafExpression::Object(o)      }

identifier -> String
  = ! "false"
    ! "func"
    ! "object"
    ! "prop"
    ! "query"
    ! "true"
    [A-Za-z][A-Za-z0-9_]* { match_str.to_string() }

literal -> Literal
  = "true"  { Literal::Bool(true)  }
  / "false" { Literal::Bool(false) }


object -> Object
  = "object" [ ]+ "{" [\n ]* tup:object_at_query
    {
      let (q, f, p) = tup;
      Object { query: q, func: f, props: p }
    }
  / q:query
    { Object::from_query(q) }
  / f:func
    { Object::from_func(f) }

object_at_query -> (Option<Query>, Function, Properties)
  = q:query [\n ]* tup:object_after_query
    {
      let (f, p) = tup;
      (Some(q), f, p)
    }
  / tup:object_at_func
    {
      let (f, p) = tup;
      (None, f, p)
    }

object_after_query -> (Function, Properties)
  = semisep tup:object_at_func
    { tup }
  / "}"
    { (Function::empty(), Properties::empty()) }

object_at_func -> (Function, Properties)
  = f:func [\n ]* props:object_after_func
    { (f, props) }
  / props:object_at_props
    { (Function::empty(), props) }

object_after_func -> Properties
  = semisep p:object_at_props
    { p }
  / "}"
    { Properties::empty() }

object_at_props -> Properties
  = p:properties [\n ]* "}"
    { p }
  / "}"
    { Properties::empty() }


query -> Query
  = "query" arrowsep body:queryexpression
    { Query(Box::new(body)) }

queryapp -> Box<QueryExpression>
  = "$" target:queryexpression
    { Box::new(target) }

func -> Function
  = "func" [ ]+ "{" [\n ]* rs:func_rules [\n ]* "}"
    { Function(rs) }
  / "func" [ ]+ r:func_rule
    { Function(vec![r]) }

func_rules -> Vec<FuncRule>
  = rs:func_rule ** semisep
    { rs }

func_rule -> FuncRule
  = p:pattern arrowsep b:expression
    { FuncRule { pattern: p, body: b } }

pattern -> Pattern
  = i:identifier
    { Pattern::Bind(i) }

properties -> Properties
  = "prop" [ ]+ props:props_from_pattern
    { props }

props_from_pattern -> Properties
  = "(" [\n ]* id:identifier [\n ]* ")" arrowsep b:expression
    {
      Properties::from_varprop(id, b)
    }
  / "." id:identifier arrowsep b:expression props:props_continue
    {
      props.plus_item(id, b)
    }

props_continue -> Properties
  = semisep props:properties
    { props }
  / ""
    { Properties::empty() }


list_expression -> List<Expression>
  = "[" [\n ]* xs:expression ** commasep [\n ]* "]"
    { List::from_unboxed_vec(xs) }

list_queryexpression -> List<QueryExpression>
  = "[" [\n ]* xs:queryexpression ** commasep [\n ]* "]"
    { List::from_unboxed_vec(xs) }


arrowsep -> ()
  = [ ]+ "->" [\n ]+

semisep -> ()
  = ";" [\n ]*
    { () }

commasep -> ()
  = "," [\n ]*
    { () }
